"""
Django settings for butifarra project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-e(k8%yj5$vv4xun=kj2s626na58=a20_ystkiujo%oll!05veb'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["localhost", "127.0.0.1"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'actividades',
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'butifarra.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates'
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'butifarra.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'defaultdb',
        'USER': 'avnadmin',
        'PASSWORD': 'AVNS_XidMtN0hHn28pRDNi29',
        'HOST': 'butifarra-butifarra69.f.aivencloud.com',
        'PORT': '18459',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


CORS_DEFAULT_ORIGINS = ["http://localhost:5173"]
EXTRA_CORS_ORIGINS = [
    origin.strip()
    for origin in os.getenv("CORS_ALLOWED_ORIGINS", "").split(",")
    if origin.strip()
]
CORS_ALLOWED_ORIGINS = CORS_DEFAULT_ORIGINS + [
    origin for origin in EXTRA_CORS_ORIGINS if origin not in CORS_DEFAULT_ORIGINS
]
CORS_ALLOW_CREDENTIALS = True
CSRF_DEFAULT_TRUSTED_ORIGINS = ["http://localhost:5173"]
EXTRA_CSRF_TRUSTED_ORIGINS = [
    origin.strip()
    for origin in os.getenv("CSRF_TRUSTED_ORIGINS", "").split(",")
    if origin.strip()
]
CSRF_TRUSTED_ORIGINS = CSRF_DEFAULT_TRUSTED_ORIGINS + [
    origin
    for origin in EXTRA_CSRF_TRUSTED_ORIGINS
    if origin not in CSRF_DEFAULT_TRUSTED_ORIGINS
]
VALID_SAMESITE_VALUES = {"Lax", "None", "Strict"}


def _get_samesite_setting(env_var_name: str, default: str = "Lax") -> str:
    """Return a valid SameSite value from the environment or the provided default."""

    value = os.getenv(env_var_name)
    if not value:
        return default

    normalized_value = value.strip().capitalize()
    return normalized_value if normalized_value in VALID_SAMESITE_VALUES else default


def _get_bool_setting(env_var_name: str, default: bool = False) -> bool:
    """Return a boolean flag from the environment."""

    value = os.getenv(env_var_name)
    if value is None:
        return default

    return value.strip().lower() in {"1", "true", "yes", "on"}


SESSION_COOKIE_SAMESITE = _get_samesite_setting("SESSION_COOKIE_SAMESITE", "Lax")
CSRF_COOKIE_SAMESITE = _get_samesite_setting("CSRF_COOKIE_SAMESITE", "Lax")

SESSION_COOKIE_SECURE = _get_bool_setting(
    "SESSION_COOKIE_SECURE", SESSION_COOKIE_SAMESITE == "None"
)
CSRF_COOKIE_SECURE = _get_bool_setting(
    "CSRF_COOKIE_SECURE", CSRF_COOKIE_SAMESITE == "None"
)
